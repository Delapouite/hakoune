:toc: macro
:toc-title: Features

# Hakoune

     _           _                          
    | |         | |                         
    | |__   __ _| | _____  _   _ _ __   ___ 
    | '_ \ / _` | |/ / _ \| | | | '_ \ / _ \
    | | | | (_| |   < (_) | |_| | | | |  __/
    |_| |_|\__,_|_|\_\___/ \__,_|_| |_|\___|


Hakoune is a friendly fork of the http://kakoune.org[Kakoune] text editor
offering 6 extra independent features.
It aims to remain compatible and up to date with the original project.



This code repository is structured as a collection of git branches:

- `vanilla`: ref to https://github.com/mawww/kakoune[`mawww/master`] branch.
  It's regularly pulled from upstream and serves as the platform to rebase the other branches.
- `hakoune`: this is the *complete edition*, with all feature-branches merged-in. 

Distribution packages with prebuilt binaries are not provided. You have to build from the source:

```
cd src && make && make install
```

Feel free to use the full `hakoune` branch or cherry-pick only the patches you want
to craft your own customized experience.


toc::[]



## TUI


### `layout` branch

This branch lets you add extra UI bars (lines) around the editor.
They can be useful to display a permanent *buffer list bar*, *grep result counters*,
*git status*, *registers contents*â€¦

To do so, add a new `ncurses_layout` value to the option `ui_options`.
It's a comma separated list of *zone names* describing the UI appearance
from top to bottom. Default value is `main,status`, meaning that
the status bar is displayed below the main editing zone.

`main` and `status` are mandatory names reserved by Hakoune.
If specified, additional zone names must refer to existing string
typed options.

For example:
`decl str foo hello`
`set global ui_options 'ncurses_assistant=cat:ncurses_layout=foo,main,status'`
will add a bar on top of the screen displaying `hello`. Then it's up to you
to replace `hello` with a more meaningful value in periodical hooks.
This string can contain markup, like the classic `echo` command.

PR: https://github.com/mawww/kakoune/pull/1942[#1942] - Mar 2018 - open

[[layout]]
.Buffers list bar with current buffer highlighted.
image::doc/screenshots/layout.png[Kakoune with layout]


### `recorded-keys` branch

During macro recording (`Q`), the recorded keys are displayed in the status line.

Issue: https://github.com/mawww/kakoune/pull/1273[#1273] - Mar 2017 - open

[[recorded-keys]]
.Recorded keys displayed at the bottom
image::doc/screenshots/recorded-keys.png[Kakoune with recorded keys]


### `status-selections` branch

This branch adds a new `selection_count` value and removes selections info from the 
`{{mode_info}}` expansion in the `modelinefmt` option.

The benefit is that you are now in control of displaying selections info as you want
and *when* you want. For instance, displaying the number of current selections is valuable
in `search` mode.

e.g. part of `modelinefmt` may contain `{StatusLineInfo}#%reg{#}/%val{selection_count}{Default}`



## Keys


### `upper-registers` branch

This branch adds a distinct behavior between lowercase and uppercase registers:

- `"ay` *yanks* the current selection(s) in the `a` register (as usual).
- `"Ay` *appends* the current selection(s) to the content of the `a` register.

PR: https://github.com/mawww/kakoune/pull/1630[#1630] - Oct 2017 - open


### `count-repeat` branch

This feature lets you prefix the `.` (repeat last insert) and `<a-.>` (repeat last select) with a count.

Examples:

- `ihello<esc>5.` first insert `hello` _and then_ insert it again 5 more times.
- `fe3<a-.>` select to next `e` _and then_ select to the 3rd `e`.

The "and then" concept above is nice, because you can take a break after the insert or select
operations. It fixes many workflow scenarios when you say to yourself: "oops, I forgot to prefix this `f`
by a count :(". With this feature: "No worries, I can still do it afterwards :)"

PR: https://github.com/mawww/kakoune/issues/1602[#1602] - Sep 2017 - open


### `goto-matching` branch

This branch binds the `gm` keys to go to the next matching character (the closing `}` if the cursor
is on a `{`). The `g<a-m>` does the same for the previous matching character.

```
map global goto m '<esc>m;' -docstring 'matching next char'
map global goto <a-m> '<esc><a-m>;' -docstring 'matching previous char'
```

PR: https://github.com/mawww/kakoune/issues/1151[#1151] - Jan 2017 - closed



## Obsolete features

The following features are now available in native Kakoune.


### `rotate-content-backward` branch

This branch provides the reverse operation of the builtin `<a-">` (rotate content forward).
Thie problem is `"` is already reserved for register handling.
In order to avoid breaking compatibility with existing scripts,
the `rotate-content-backward` primitive is bound to `<c-k>`, which is free by default.

It seems a weird choice at first but here's the trick:

```
map global normal <ret> '<a-">' -docstring 'rotate selections content forward'
```

Currently `<ret>` is a synonym for `<c-j>` because of crazy terminal protocol legacy.
So we obtain a nice symmetry with a *up* (k) and *down* (j) keys mnemonic for backward/forward.

PR: https://github.com/mawww/kakoune/issues/1210[#1210] - Feb 2017 - closed
Commit: https://github.com/mawww/kakoune/commit/ec7f3738ee08fa3c2e095d29dcb61eab37ba434f[ec7f37]
